export binary

export crossBinaries

export lint

string versionCmd() {
	"git describe --match 'v[0-9]*' --tags --dirty='.dirty' --always | sed 's/^v//'"
}

fs golang() {
	image "golang:1.14.10-alpine"
}

fs build(fs src, string package, string verPackage) {
	golang
	run "apk add -U git gcc libc-dev"
	env "GO111MODULE" "on"
	dir "/go/src/hlb"
	run "v=$(${versionCmd}) && /usr/local/go/bin/go build -o /out/binary -ldflags \"-linkmode external -extldflags -static -X ${package}.Version=$v\" -a ${verPackage}" with option {
		cacheMounts src
		mount scratch "/out" as binary
	}
}

fs crossBuild(fs src, string package, string verPackage) {
	image "hinshun/go-cross:1.14.10"
	env "GOPATH" "/root/go"
	env "GO111MODULE" "on"
	dir "/go/src/hlb"
	run "v=$(${versionCmd}) && LDFLAGS=\"-X ${verPackage}.Version=$v\" /cross/build \"${package}\"" with option {
		env "CGO_ENABLED" "0"
		cacheMounts src
		mount git("https://github.com/hinshun/go-cross.git", "") "/cross" with option {
			sourcePath "/scripts"
			readonly
		}
		mount scratch "/root/go/bin" as crossBinaries
	}
}

fs lint(fs src) {
	golang
	run "apk add -U git gcc libc-dev"
	run "sh /golangci/install.sh -b /usr/bin v1.31.0" with option {
		mount http("https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh") "/golangci"
	}
	env "GO111MODULE" "on"
	env "PATH" "/usr/bin:/bin:/usr/local/go/bin"
	dir "/go/src/hlb"
	run "go get" with cacheMounts(src)
	run "/usr/bin/golangci-lint run" with cacheMounts(src)
}

option::run cacheMounts(fs src) {
	mount src "/go/src/hlb" with readonly
	mount scratch "/root/.cache/go-build" with cache("hlb/go-build", "private")
	mount scratch "/go/pkg/mod" with cache("hlb/go-mod", "private")
}
